import pydicom
import os
import json
import argparse

def extract_filtered_dicom_metadata(directory, target_serial_number, labels):
    """
    Extracts metadata from DICOM files with a specific DeviceSerialNumber.

    Args:
        directory (str): The path to the DICOM directory.
        target_serial_number (str): The DeviceSerialNumber to filter by.
        labels (list): A list of DICOM tag names to extract.

    Returns:
        dict: A dictionary of extracted metadata.
    """

    dicom_metadata = {}
    for root, _, files in os.walk(directory):
        for file in files:
            if file.lower().endswith(".dcm"):
                file_path = os.path.join(root, file)
                try:
                    dataset = pydicom.dcmread(file_path, force=True)
                    if hasattr(dataset, 'DeviceSerialNumber') and dataset.DeviceSerialNumber == target_serial_number:
                        metadata = {}
                        for label in labels:
                            try:
                                metadata[label] = dataset.data_element(label).value
                            except AttributeError:
                                metadata[label] = "N/A"
                            except TypeError:
                                metadata[label] = str(dataset.data_element(label).value)

                        dicom_metadata[file] = metadata
                except pydicom.errors.InvalidDicomError:
                    print(f"Warning: Invalid DICOM file: {file_path}")
                except Exception as e:
                    print(f"Error processing {file_path}: {e}")

    return dicom_metadata



if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Extract DICOM metadata based on DeviceSerialNumber.")
    parser.add_argument("dicom_directory", help="Path to the DICOM directory.")
    parser.add_argument("-o", "--output", default="filtered_metadata.json", help="Output JSON file name (default: filtered_metadata.json).")
    parser.add_argument("-p", "--print", action='store_true', help="prints the dictionary to the console")
    parser.add_argument("-s", "--serial", default="41837", help="DeviceSerialNumber to filter by (default: 41837).")
    parser.add_argument("-l", "--labels", nargs='+', default=["DeviceSerialNumber", "PatientID", "PatientName"], help="list of dicom labels to extract. Default is DeviceSerialNumber, PatientID, and PatientName")

    args = parser.parse_args()

    metadata_dict = extract_filtered_dicom_metadata(args.dicom_directory, args.serial, args.labels)

    with open(args.output, "w") as f:
        json.dump(metadata_dict, f, indent=4)

    print(f"Metadata saved to {args.output}")

    if args.print:
        print(json.dumps(metadata_dict, indent=4))